all_sources=$(LIB_MODULES) $(NON_LIB_MODULES)

sources_mli=$(LIB_MODULES:%.ml=%.mli)
native_cmx=$(all_sources:%.ml=%.cmx)
byte_cmo=$(all_sources:%.ml=%.cmo)
neutral_cmi=$(sources_mli:%.mli=%.cmi)

test_native_cmx=$(TEST_MODULES:%.ml=%.cmx)
test_byte_cmo=$(TEST_MODULES:%.ml=%.cmo)

test_native=$(TEST_MODULES:%.ml=%.native_test)
test_byte=$(TEST_MODULES:%.ml=%.byte_test)

empty:=
space:=$(empty) $(empty)
comma:=,


ifndef LIBRARY_NAME
	LIBRARY_NAME:=$(shell basename `pwd`)
endif

ifdef PACK
	byte_targets_deps=$(PACK).cmo
	native_targets_deps=$(PACK).cmx
	OCAMLOPT_OPTS:=-for-pack \
	$(shell echo $(PACK) | awk '{print toupper(substr($$0,1,1))substr($$0,2)}') \
	$(OCAMLOPT_OPTS)
else
	byte_targets_deps=$(byte_cmo)
	native_targets_deps=$(native_cmx)
endif

ifdef PACKAGES
	OCAMLC_OPTS:=$(OCAMLC_OPTS) -package $(subst $(space),$(comma),$(PACKAGES))
	OCAML_OPTS:=$(OCAML_OPTS) -package $(subst $(space),$(comma),$(PACKAGES))
endif

.PHONY: byte-code native-code clean
.PHONY: test-byte-code test-native-code test

$(BYTE_TARGETS): $(byte_targets_deps)

$(NATIVE_TARGETS): $(native_targets_deps)

$(PACK).cmx: $(native_cmx)
	ocamlfind ocamlopt -pack -o $@ $^

$(PACK).cmo: $(byte_cmo)
	ocamlfind ocamlc -pack -o $@ $^

$(native_cmx): $(EXTERNAL_DEPS)

$(byte_cmo): $(EXTERNAL_DEPS)

$(neutral_cmi): $(EXTERNAL_DEPS)

$(test_native): $(test_native_cmx)

$(test_byte): $(test_byte_cmo)

byte-code: $(BYTE_TARGETS)

native-code: $(NATIVE_TARGETS)

install_lib: $(NATIVE_TARGETS) $(BYTE_TARGETS)
	ocamlfind install $(LIBRARY_NAME) META $(NATIVE_TARGETS) $(BYTE_TARGETS) \
	$(LIBRARY_NAME).a *.cmx *.cmi *.mli

test-byte-code: $(test_byte)

test-native-code: $(test_native)

$(test_native_cmx): $(EXTERNAL_DEPS)

$(test_byte_cmo): $(EXTERNAL_DEPS)

test: $(test_native) $(test_byte)
	for test in $^ ; do \
	  echo $$test ; \
	  (./$$test && echo "Passed") || echo "Failed" ; \
	done

%.cmxa: %.cmx
ifeq ($@, $(PACK).cmxa)
	ocamlfind ocamlopt $(OCAMLOPT_OPTS) -a -thread -I +camlp4 -o $@ $(PACK).cmx
else
	ocamlfind ocamlopt $(OCAMLOPT_OPTS) -a -thread -I +camlp4 -o $@ \
	$(patsubst %.ml,%.cmx,$(shell \
	ocamlfind ocamldep $(OCAMLDEP_OPTS) -sort $(patsubst %.cmx,%.ml,$^)))
endif

%.cma: %.cmo
ifeq ($@, $(PACK).cma)
	ocamlfind ocamlc $(OCAMLC_OPTS) -custom -a -thread -I +camlp4 -o $@ $(PACK).cmo
else
	ocamlfind ocamlc $(OCAMLC_OPTS) -custom -a -thread -I +camlp4 -o $@ \
	$(patsubst %.ml,%.cmo,$(shell \
	ocamlfind ocamldep $(OCAMLDEP_OPTS) -sort $(patsubst %.cmo,%.ml,$^)))
endif

%.cmx: %.ml
	ocamlfind ocamlopt -thread -I +camlp4 $(OCAMLOPT_OPTS) $(CAMLP4) -c \
	$(patsubst %.cmx,%.ml,$@)

%.cmi: %.mli
	ocamlfind ocamlc -thread -I +camlp4 $(OCAMLC_OPTS) -c $(patsubst %.cmi,%.mli,$@)

%.cmo: %.ml
	ocamlfind ocamlc -thread -I +camlp4 $(OCAMLC_OPTS) $(CAMLP4) -c \
	$(patsubst %.cmo,%.ml,$@)

%.native: %.cmx
	ocamlfind ocamlopt $(OCAMLOPT_OPTS) -thread -linkpkg -o $@ \
	$(patsubst %.ml,%.cmx,$(shell \
	ocamlfind ocamldep $(OCAMLDEP_OPTS) -sort $(patsubst %.cmx,%.ml,$^)))

%.native_test: %.cmx
	ocamlfind ocamlopt $(OCAMLOPT_OPTS) -thread -linkpkg -g -o $@ \
	$(patsubst %.native_test,%.cmx,$@)

%.native_ex: %.cmx
	ocamlfind ocamlopt $(OCAMLOPT_OPTS) -thread -linkpkg -g -o $@ \
	$(patsubst %.native_ex,%.cmx,$@)

%.byte: %.cmo
	ocamlfind ocamlc $(OCAMLC_OPTS) -thread -custom -linkpkg -o $@ \
	$(patsubst %.ml,%.cmo,$(shell \
	ocamlfind ocamldep $(OCAMLDEP_OPTS) -sort $(patsubst %.cmo,%.ml,$^)))

%.byte_test: %.cmo
	ocamlfind ocamlc $(OCAMLC_OPTS) -thread -custom -linkpkg -g -o $@ \
	$(patsubst %.byte_test,%.cmo,$@)

%.byte_ex: %.cmo
	ocamlfind ocamlc $(OCAMLC_OPTS) -thread -custom -linkpkg -g -o $@ \
	$(patsubst %.byte_ex,%.cmo,$@)

.d: $(all_sources) $(sources_mli)
	ocamlfind ocamldep $(OCAMLDEP_OPTS) $(CAMLP4) $(all_sources) $(sources_mli) > .d

clean:
	-rm -f \
	  META \
	  $(BYTE_TARGETS) \
	  $(NATIVE_TARGETS) \
	  $(native_cmx) \
	  $(byte_cmo) \
	  $(neutral_cmi) \
	  $(test_byte) \
	  $(test_native) \
	  $(test_byte_cmo) \
	  $(test_native_cmx) \
	  .d *.o *.a *.cmi

print-%: ; @echo $*=$($*)

META: Makefile
	@echo "name=\"$(basename $(BYTE_TARGETS))\"" > META
	@echo "version=\"1.0.0\"" >> META
	@echo "description=\"$(DESCRIPTION)\"" >> META
	@echo "requires=\"$(subst $(space),$(comma),$(PACKAGES))\"" >> META
	@echo "archive(byte)=\"$(BYTE_TARGETS)\"" >> META
	@echo "archive(native)=\"$(NATIVE_TARGETS)\"" >> META

-include .d
